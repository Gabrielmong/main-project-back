DROP TABLE usuario CASCADE CONSTRAINTS;
------------ Tablas
CREATE TABLE usuario (
    id_User NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    userPassword VARCHAR(20),
    userName VARCHAR(20),
    nombre VARCHAR2(15),
    apellido VARCHAR2(15),
    correo VARCHAR2(35),
    telefono VARCHAR(15),
    CONSTRAINT user_pk PRIMARY KEY (id_User)
);

drop table restaurante;
CREATE TABLE restaurante (
    id_Restaurante NUMBER(10) NOT NULL,
    nombre VARCHAR2(20),
    tipo_Comida VARCHAR2(25),
    price_Range NUMBER(1),
    fileName VARCHAR2(500),
    CONSTRAINT restaurante_pk PRIMARY KEY (id_Restaurante)
);
drop table platillo;
CREATE TABLE platillo (
    id_Platillo NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    restaurante NUMBER(25),
    descripcion VARCHAR2(500),
    nombre VARCHAR2(50),
    precio NUMBER(10),
    CONSTRAINT platillo_pk PRIMARY KEY (id_Platillo),
    CONSTRAINT fk_platillo
    FOREIGN KEY (restaurante)
    REFERENCES restaurante(id_Restaurante)
);
drop table bebida;
CREATE TABLE bebida (
    id_Bebida NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    restaurante NUMBER(25),
    descripcion VARCHAR2(500),
    nombre VARCHAR2(50),
    precio NUMBER(10),
    CONSTRAINT bebida_pk PRIMARY KEY (id_Bebida),
    CONSTRAINT fk_bebida
    FOREIGN KEY (restaurante)
    REFERENCES restaurante(id_Restaurante)
);

drop table dieta;
CREATE TABLE dieta (
    restaurante NUMBER(25),
    dieta VARCHAR2(50),
    ubicacion VARCHAR2(20),
    CONSTRAINT fk_dieta
    FOREIGN KEY (restaurante)
    REFERENCES restaurante(id_Restaurante)
);

drop table empleado;
CREATE TABLE empleado (
    id_Empleado NUMBER (10)NOT NULL,
    restaurante NUMBER(25),
    nombre VARCHAR2(15),
    apellido VARCHAR2(15),
    puesto VARCHAR2(20),
    CONSTRAINT empleado_pk PRIMARY KEY (id_Empleado),
    CONSTRAINT fk_empleado
    FOREIGN KEY (restaurante)
    REFERENCES restaurante(id_Restaurante)
);

delete from empleado;

CREATE SEQUENCE usuario_seq
  START WITH 1
  INCREMENT BY 1
  CACHE 100;
  
DROP SEQUENCE restaurante_seq;
CREATE SEQUENCE restaurante_seq
  START WITH 1
  INCREMENT BY 1
  CACHE 100;
CREATE SEQUENCE empleado_seq
  START WITH 1
  INCREMENT BY 1
  CACHE 100;

CREATE OR REPLACE TRIGGER trigger_usuario
    BEFORE INSERT ON usuario
    FOR EACH ROW
  BEGIN
    :new.id_User := usuario_seq.nextval;
  END;
CREATE OR REPLACE TRIGGER trigger_restaurante
    BEFORE INSERT ON restaurante
    FOR EACH ROW
  BEGIN
    :new.id_restaurante := restaurante_seq.nextval;
  END;
CREATE OR REPLACE TRIGGER trigger_empleado
    BEFORE INSERT ON empleado
    FOR EACH ROW
  BEGIN
    :new.id_Empleado := empleado_seq.nextval;
  END;

-- inserts

delete from dieta;
delete from restaurante;
insert into restaurante(nombre,tipo_Comida, price_Range, fileName)
  values('McDonalds','Fast food', 3, ' ');
  insert into restaurante(nombre,tipo_Comida, price_Range, fileName)
  values('Nacion sushi','Asian', 5, ' ');
  insert into restaurante(nombre,tipo_Comida, price_Range, fileName)
  values('smash burger','Fast food', 4, ' ');
  insert into restaurante(nombre,tipo_Comida, price_Range, fileName)
  values('Garden Bistro','Bistró', 4, ' ');

  select * from restaurante;

delete from platillo where restaurante = 4;
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(1,'Meat, lettuce and cheese burger', 'CheeseBurger', 2000);
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(2,'Uruchimai with salmon, shrimp and avocado', 'Sushita roll', 7200);
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(1,'Meat, lettuce and cheese burger with special BigMac sauce', 'BigMac',3000);
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(1,'A literal piece of deep fried chicken', 'Fried Chicken', 1200);
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(3,'Truffle burger with Angus meat', 'Truffle Hongos Burger', 7000);
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(3,'Angus meat burger with avocado', 'Doble guacamoles', 6500);
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(4,'Casserole with fried eggs, jalapeños and tomato sauce', 'Huevos Rancheros', 5948);
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(4,'Homemade bread, maple syrup and fruits', 'French Toast', 3465);
  insert into platillo(restaurante,descripcion, nombre, precio)
  values(4,'Simmered, red wine sauce', 'Onion Soup', 4873);
  
  commit;

delete from bebida;
  insert into bebida(restaurante,descripcion, nombre, precio)
  values(01,'Plain Coca cola', 'Coca cola', 1200);
  insert into bebida(restaurante,descripcion, nombre, precio)
  values(02,'Wine and some fruits','Sangría', 2000);
  insert into bebida(restaurante,descripcion, nombre, precio)
  values(03,'Plain apple juice', 'Apple Juice',700);
  insert into bebida(restaurante,descripcion, nombre, precio)
  values(04,'Tomato juice, vodka, lemon and lots of hot sauce', 'Bloody Mary',4363);
  insert into bebida(restaurante,descripcion, nombre, precio)
  values(04,'Shot of espresso, Shot of vodka, shot of Licor 43', 'Espresso Martini',4363);
  insert into bebida(restaurante,descripcion, nombre, precio)
  values(04,'Good ol bourbon, Angostura bitters, sugar and orange oils', 'Old Fashioned',4363);

  insert into dieta(restaurante,dieta, ubicacion)
    values(01,'vegetariano','san jose');
  insert into dieta(restaurante,dieta, ubicacion)
    values(02,'pescetarian','pinares');
  insert into dieta(restaurante,dieta, ubicacion)
    values(03,'keto', 'curridabat');

    insert into empleado(restaurante,nombre, apellido, puesto)
      values(01,'luis','perez', 'gerente');
    insert into empleado(restaurante,nombre, apellido, puesto)
      values(01,'Ana','Gonzalez', 'cajera');
    insert into empleado(restaurante,nombre, apellido, puesto)
      values(02,'Daniela','Granados', 'mesera');


select * from restaurante
   inner join platillo
   on restaurante.id_restaurante = platillo.restaurante;


  -- aqui hay un fuckie fuckie no revisa si ya esta en la tabla


drop table review;

CREATE TABLE review (
    id_Review NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    restaurante VARCHAR2(25),
    usuario VARCHAR2(25),
    rest_score NUMBER(1),
    review VARCHAR2(1024),
    created DATE,
    edited DATE,
    ubicacion VARCHAR2(20),
    fileName VARCHAR2(500),
    CONSTRAINT review_pk PRIMARY KEY (id_Review)
);

CREATE TABLE review (
    id_Review NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    restaurante VARCHAR2(25),
    usuario VARCHAR2(25),
    rest_score NUMBER(1),
    review VARCHAR2(1024),
    created DATE,
    edited DATE,
    ubicacion VARCHAR2(20),
    fileName VARCHAR2(500),
    CONSTRAINT review_pk PRIMARY KEY (id_Review)
);

commit;
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

INSERT INTO review (restaurante, usuario, rating, review, created, ubicacion)
    VALUES ('McDonalds', 'Gabriel', 5, 'Aquí va muchísimo texto', '2022-07-30', 'San José', 'empanada.png');


SELECT * FROM review;

CREATE OR REPLACE PROCEDURE insertReview(
    in_restaurante IN review.restaurante%TYPE,
    in_usuario IN review.usuario%TYPE,
    in_rating IN review.rest_score%TYPE,
    in_review IN review.review%TYPE,
    in_created IN review.created%TYPE,
    in_ubicacion IN review.ubicacion%TYPE,
    in_fileName IN review.fileName%TYPE)
IS
BEGIN
    INSERT INTO review (restaurante, usuario, rest_score, review, created, ubicacion, fileName)
    VALUES (in_restaurante, in_usuario, in_rating, in_review, in_created, in_ubicacion, in_fileName);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Review created');
END;

CREATE OR REPLACE PROCEDURE editReview(
    in_idRev IN review.id_Review%TYPE,
    in_rating IN review.rest_score%TYPE,
    in_review IN review.review%TYPE,
    in_edited IN review.edited%TYPE)
IS
BEGIN
    UPDATE REVIEW SET
        rest_score = in_rating,
        review = in_review,
        edited = in_edited
    WHERE id_Review = in_idRev;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Review edited');

END;

------------ Agregar un usuario
CREATE OR REPLACE PROCEDURE addUser(
    in_nombre IN usuario.nombre%TYPE,
    in_userPassword IN usuario.userPassword%TYPE,
    in_userName IN usuario.userName%TYPE,
    in_apellido IN usuario.apellido%TYPE,
    in_correo IN usuario.correo%TYPE,
    in_telefono IN usuario.telefono%TYPE)
IS
BEGIN
    INSERT INTO usuario (nombre, userName, userPassword, apellido, correo, telefono)
    VALUES (in_nombre, in_userName, in_userPassword, in_apellido, in_correo, in_telefono);
    COMMIT;
        DBMS_OUTPUT.PUT_LINE('User created');
END;

------------ Eliminar un usuario
CREATE OR REPLACE PROCEDURE deleteUser (
    p_userName in usuario.userName%TYPE,
    p_userPassword IN usuario.userPassword%TYPE)
IS
Begin
    Delete from USUARIO WHERE userName = p_userName and userPassword = p_userPassword ;
    COMMIT;
        DBMS_OUTPUT.PUT_LINE('User deleted');
END;

------------ Editar un usuario
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE alterUser (
    ind_userName IN usuario.userName%TYPE,
    ind_userPassword IN usuario.userPassword%TYPE,
    in_userName IN usuario.userName%TYPE,
    in_nombre IN usuario.nombre%TYPE,
    in_userPassword IN usuario.userPassword%TYPE,
    in_apellido IN usuario.apellido%TYPE,
    in_correo IN usuario.correo%TYPE,
    in_telefono IN usuario.telefono%TYPE)
IS
BEGIN

    UPDATE USUARIO SET
        username = in_userName,
        userpassword = in_userPassword,
        nombre = in_nombre,
        apellido = in_apellido,
        correo = in_correo,
        telefono = in_telefono
    WHERE userName = ind_userName AND userpassword = ind_userPassword;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('User updated');
END;


drop table review;

--------------------- Functional Review
CREATE TABLE review (
    id_Review NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    restaurante VARCHAR2(25),
    usuario VARCHAR2(25),
    rest_score NUMBER(1),
    review VARCHAR2(1024),
    created DATE,
    edited DATE,
    ubicacion VARCHAR2(20),
    fileName VARCHAR2(500),
    CONSTRAINT review_pk PRIMARY KEY (id_Review)
);

select * from review;

SELECT * FROM REVIEW ORDER BY id_Review DESC;